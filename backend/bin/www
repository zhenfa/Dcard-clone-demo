#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('backend:server');
var http = require('http');

/** 引用 dotenv 使用本地環境參數 */
require('dotenv').config({path:`./.env.${process.env.NODE_ENV}`});

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

/** 創建 mongoose */
const mongoose = require('mongoose');
/** 建立數據庫連接 */
mongoose.connect(`mongodb://${process.env.HOST}:${process.env.MONGO_DB_PORT}/dcard-blog`);
const db = mongoose.connection;

/** 資料庫連接事件 */
db.on('open', ()=>{
  console.log('mongodb connect success!');

  var server = http.createServer(app);

  server.listen(port);
  server.on('error', onError);
  server.on('listening', ()=>{
    var addr = server.address();
    var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
    console.log(`server is running on port:${port}`)
    debug('Listening on ' + bind);
  });
})

db.on('error', (err)=>{
  console.log(`mongodb connect fail, message:${err}`);
})
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}
